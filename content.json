{"meta":{"title":"scr1pt_k1ddi3' blog","subtitle":"","description":"","author":"scr1pt_k1ddi3","url":"https://scr1pt-k1ddi3.github.io","root":"/"},"pages":[{"title":"about","date":"2022-04-13T10:12:53.000Z","updated":"2022-04-18T15:55:34.050Z","comments":true,"path":"about.html","permalink":"https://scr1pt-k1ddi3.github.io/about.html","excerpt":"","text":"💻 关于博客本站纯属瞎胡闹搞的，请各位客官不要轻信❤️：😃 关于我😎 个人简介本人是一只小傻鸟🐣🐥🐤，大菜狗🐶，还请各位客官多多包含,多多指教🙏🙏🙏。😷参悟真谛：佛曰：俱以豆皤想呐不薩缽多礙顛奢那皤死冥爍悉究侄特皤苦倒老咒侄真盡苦呐遠奢遮吉皤瑟冥特依哆數穆咒利俱爍"},{"title":"文章归档","date":"2022-04-13T14:16:19.393Z","updated":"2022-04-13T13:25:15.839Z","comments":true,"path":"archive.html","permalink":"https://scr1pt-k1ddi3.github.io/archive.html","excerpt":"","text":""},{"title":"friends","date":"2022-04-18T14:51:39.000Z","updated":"2022-04-18T15:50:53.074Z","comments":true,"path":"PY.html","permalink":"https://scr1pt-k1ddi3.github.io/PY.html","excerpt":"","text":"你我弟兄，辈子弟兄。其他弟兄，都是冒充！ 💪😎 scr1pt_k1ddi3’弟兄❤️❤️❤️"},{"title":"categories","date":"2022-04-13T10:54:10.000Z","updated":"2022-04-13T13:20:09.026Z","comments":true,"path":"categories/index.html","permalink":"https://scr1pt-k1ddi3.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"ichunqiu-Mercy-code","slug":"ichunqiu-Mercy-code","date":"2022-05-08T09:52:18.000Z","updated":"2022-05-08T10:51:08.502Z","comments":true,"path":"2022/05/08/ichunqiu-Mercy-code/","link":"","permalink":"https://scr1pt-k1ddi3.github.io/2022/05/08/ichunqiu-Mercy-code/","excerpt":"","text":"源码：&lt;?php highlight_file(__FILE__); if ($_POST[&#39;cmd&#39;]) &#123; $cmd = $_POST[&#39;cmd&#39;]; if (&#39;;&#39; === preg_replace(&#39;/[a-z_]+\\((?R)?\\)/&#39;, &#39;&#39;, $cmd)) &#123; if (preg_match(&#39;/file|if|localeconv|phpversion|sqrt|et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log|var_dump|pos|current|array|time|se|ord/i&#39;, $cmd)) &#123; die(&#39;What are you thinking?&#39;); &#125; else &#123; eval($cmd); &#125; &#125; else &#123; die(&#39;Please calm down&#39;); &#125; &#125; 思路这个题就是[GXYCTF2019]禁止套娃的改编版本，&#39;;&#39; === preg_replace(&#39;/[a-z_]+\\((?R)?\\)/&#39;, &#39;&#39;, $cmd的意思就是只能是无参数函数，恶心一点的是这里加了亿点点过滤，啥玩意都过滤了，环境关了，就从本地实验吧。 从网上找到几篇比较好的无参rce： php rce之无参数读文件 - FreeBuf网络安全行业门户 (55条消息) php无参数函数实现rce,无参数读文件和RCE总结_春雪芳菲的博客-CSDN博客 原始的那些payload都不管用，这里主要就是想办法构造.,主要影响的过滤就是 array、localeconv、phpversion、et、nt、sqrt、ord、time反正就是都过滤了个差不多了。不过我找到了一个payload： print_r(scandir(chr(ord(hebrevc(crypt(time())))))); 解释：crypt()返回使用 DES、Blowfish 或 MD5 算法加密的字符串。 hebrevc() 函数把希伯来文本从右至左的流转换为左至右的流。同时，把新行（\\n）转换为 hebrevc(crypt(arg))可以随机生成一个hash值，第一个字符随机是$(大概率) 或者 “.”(小概率) 然后通过chr(ord())只取第一个字符&#x2F; ord()返回字符串中第一个字符的Ascii值。 实验过程： 可以看出来，hebrevc()、crypt()这两个函数是没有过滤的，time()这个函数就是返回一个数，换一个就行，随便从数学函数找一个就行， 比如：sin()，如图： 效果一样。 关键问题是ord()函数被过滤了，这就是一个比较严重的问题，不过我们只要找到一个函数返回一个字符串的第一个字符就行。 我找到了这个函数，str_split() 函数，解释： str_split() 函数把字符串分割到数组中。 语法 str_split(string,length) 参数 描述 string 必需。规定要分割的字符串。 length 可选。规定每个数组元素的长度。默认是 1。 注意： length 可选。规定每个数组元素的长度。默认是 1。 所以就试试，因为我们就是要返回第一个.,结果： 返回了数组有一大堆东西。。。 想办法找第一个并输出就行，我们注意到虽然过滤了array，但是next(),prev()等函数并没有过滤，所以我们只要将指针指向数组第一个值就行，我这里选的是next()和each()搭配，瞎试出来的。。。 这里each() 函数返回当前元素的键名和键值，并将内部指针向前移动。然后next()函数再向后移动一下，正好回去并且输出。这不就构造出来了吗😁 多试几次就会返回.，结果如图： 再加scandir()，成功返回： 但是题目中print_r()和var_dump()都被过滤，数组输出不出来，所以就只能用echo()猜位置，题目中猜最后一个正好是flag，就直接加个end()函数读就完了。 payload： cmd=show_source(end(scandir(next(each(str_split(hebrevc(crypt(sin())))))))); 不过好像如果文件不在最后一个而是在中间，那么由于过滤了array，好像就不太好读了。。。","categories":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/tags/CTF/"},{"name":"web","slug":"web","permalink":"https://scr1pt-k1ddi3.github.io/tags/web/"},{"name":"rce","slug":"rce","permalink":"https://scr1pt-k1ddi3.github.io/tags/rce/"}]},{"title":"hello world","slug":"hello-world","date":"2021-04-08T06:45:37.000Z","updated":"2022-04-17T12:35:56.418Z","comments":true,"path":"2021/04/08/hello-world/","link":"","permalink":"https://scr1pt-k1ddi3.github.io/2021/04/08/hello-world/","excerpt":"","text":"Hello World👽!","categories":[{"name":"hello","slug":"hello","permalink":"https://scr1pt-k1ddi3.github.io/categories/hello/"}],"tags":[{"name":"hello","slug":"hello","permalink":"https://scr1pt-k1ddi3.github.io/tags/hello/"}]}],"categories":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/"},{"name":"hello","slug":"hello","permalink":"https://scr1pt-k1ddi3.github.io/categories/hello/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/tags/CTF/"},{"name":"web","slug":"web","permalink":"https://scr1pt-k1ddi3.github.io/tags/web/"},{"name":"rce","slug":"rce","permalink":"https://scr1pt-k1ddi3.github.io/tags/rce/"},{"name":"hello","slug":"hello","permalink":"https://scr1pt-k1ddi3.github.io/tags/hello/"}]}